s2year <- udunits2::ud.convert(1, '1/s', '1/year') # not used
## MAT = Mean Annual Temperature
ncep_data_list <- list()
for(i in 1:nrow(unique_xyt)){
ncep_data_list[[i]] <- unique_xyt[i, list(lat, lon, year, MAT = mean(get_met(year, lat, lon, 'air.2m')),
MAP = sum(get_met(year, lat, lon, 'prate.sfc')),
PET = mean(get_met(year, lat, lon, 'pevpr.sfc')),
SOLAR = sum(get_met(year, lat, lon, 'dswrf.sfc'))
)]
ncep_data <- rbindlist(ncep_data_list)
save(ncep_data, file = "~/ncep_data.RData")
}
lat <- 10
lon <- 10
var <- 'pevpr.sfc'
ans <- try_default(quiet = TRUE, default = NA, expr =
NCEP.gather(variable = var, level='gaussian', months.minmax=c(5,9), years.minmax = c(year,year), lat.southnorth = c(lat,lat), lon.westeast=c(lon,lon), reanalysis2 = TRUE, return.units = FALSE, status.bar=FALSE)
)
ans
lat <- 100
lon <- 100
var <- 'pevpr.sfc'
ans <- try_default(quiet = TRUE, default = NA, expr =
NCEP.gather(variable = var, level='gaussian', months.minmax=c(5,9), years.minmax = c(year,year), lat.southnorth = c(lat,lat), lon.westeast=c(lon,lon), reanalysis2 = TRUE, return.units = FALSE, status.bar=FALSE)
)
```
NCEP.gather
wx.extent <- NCEP.gather(variable='air', level=850,
months.minmax=c(8,9), years.minmax=c(2000,2001),
lat.southnorth=c(50,55), lon.westeast=c(0,5),
reanalysis2 = FALSE, return.units = TRUE)
m5pTree <- M5P(yield ~ sacchariflorus + sinensis + sinensis.Hybrid + giganteus +
library(RNCEP)
wx.extent <- NCEP.gather(variable='air', level=850, months.minmax=c(8,9), years.minmax=c(2000,2001),
lat.southnorth=c(50,55), lon.westeast=c(0,5),
reanalysis2 = FALSE, return.units = TRUE)
library(RNCEP)
wx.extent <- NCEP.gather(variable='air', level='gaussian', months.minmax=c(5,9), years.minmax=c(2000,2000),
lat.southnorth=c(55,55), lon.westeast=c(5,5),
reanalysis2 = FALSE, return.units = TRUE, status.bar=FALSE)
library(RNCEP)
wx.extent <- NCEP.gather(variable='pevpr.sfc', level='gaussian', months.minmax=c(5,9), years.minmax=c(2000,2000),
lat.southnorth=c(55,55), lon.westeast=c(5,5),
reanalysis2 = FALSE, return.units = TRUE, status.bar=FALSE)
library(shiny)
library(shiny)
shinyUI(bootstrapPage(
selectInput(inputId = "n_breaks",
label = "Number of bins in histogram (approximate):",
choices = c(10, 20, 35, 50),
selected = 20),
checkboxInput(inputId = "individual_obs",
label = strong("Show individual observations"),
value = FALSE),
checkboxInput(inputId = "density",
label = strong("Show density estimate"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "300px"),
# Display this only if the density is shown
conditionalPanel(condition = "input.density == true",
sliderInput(inputId = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
unExample("01_hello")
runExample("01_hello")
yields <- fread("data/clean_yields.csv")
yields <- fread("./data/clean_yields.csv")
yields <- fread("../data/clean_yields.csv")
yields <- fread("clean_yields.csv")
download.file("https://gist.githubusercontent.com/dlebauer/357e02e5f91390fd9ca0/raw/e5f74e0d65b45014ecd9b29d90100b370b1a0f09/yields.csv", method = 'curl', destfile = 'yields.csv')
yields <- fread("clean_yields.csv")
yields <- fread("yields.csv")
unique_xyt <- unique(yields[,list(lat, lon, year) ])
get_met <- function(year, lat, lon, var){
ans <- NULL
ans <- try_default(quiet = TRUE, default = NA, expr =
NCEP.gather(variable = var, level='gaussian', months.minmax=c(5,9), years.minmax = c(year,year), lat.southnorth = c(lat,lat), lon.westeast=c(lon,lon), reanalysis2 = TRUE, return.units = FALSE, status.bar=FALSE)
)
if(any(!is.na(ans))){
lats <- as.numeric(dimnames(ans)[[1]])
lons <- as.numeric(dimnames(ans)[[2]])
lons[lons>180] <- lons[lons>180] - 360
dlat <- abs(lat - lats)
dlon <- abs(lon - lons)
#weights
wlat <- dlat/sum(dlat, na.rm = TRUE)
wlon <- dlon/sum(dlon, na.rm = TRUE)
weights <- as.matrix(wlat) %*% t(as.matrix(wlon))
ans2 <- rowMeans(ans, dims = 2, na.rm = TRUE)
ans2.1 <- ans2[!is.nan(ans2)]
ans3 <- sum(ans2.1 * weights)
}# else if (geometric_weighting == TRUE){
## geometric weighting
#     if(dim(ans)[2] == 1) ans <- abind(ans, ans, along = 2)
#     if(all(is.na(ans[2,,]))) {
#       ans[is.na(ans)]  <- ans[!is.na(ans)]
#       dimnames(ans)[[1]][1] <- dimnames(ans)[[1]][2]
#       }
#     if(all(is.na(ans[1,,]))) {
#       ans[is.na(ans)]  <- ans[!is.na(ans)]
#       dimnames(ans)[[1]][2] <- dimnames(ans)[[1]][1]
# ans2 <- ans[1,,] * dlat[1]/sum(dlat) + ans[2,,]* dlat[2]/sum(dlat)
# ans3 <- ans2[1,] * dlon[1]/sum(dlon) + ans2[2,]* dlon[2]/sum(dlon)
#}
return(ans3)
}
s2year <- udunits2::ud.convert(1, '1/s', '1/year')
## MAT = Mean Annual Temperature
ncep_data_list <- list()
for(i in 1:nrow(unique_xyt)){
ncep_data_list[[i]] <- unique_xyt[i, list(lat, lon, year, MAT = mean(get_met(year, lat, lon, 'air.2m')),
MAP = sum(get_met(year, lat, lon, 'prate.sfc')),
PET = mean(get_met(year, lat, lon, 'pevpr.sfc')),
SOLAR = sum(get_met(year, lat, lon, 'dswrf.sfc'))
)]
ncep_data <- rbindlist(ncep_data_list)
save(ncep_data, file = "~/ncep_data.RData")
}
ggplot() + geom_point(data = ncep_data, aes(lon, lat, color = MAP/PET))
## MAT = Mean Annual Temperature
View(unique_xyt)
View(ncep_data)
tst2 <- NCEP.flight(beg.loc=c(58.00,7.00), end.loc=c(53.00,7.00),
begin.dt='2007-10-01 18:00:00', flow.assist='NCEP.Tailwind',
fa.args=list(u=2, v=0, airspeed=12), path='loxodrome',
calibrate.dir=TRUE, calibrate.alt=FALSE, cutoff=-10, when2stop='latitude',
levels2consider=850, hours=12, evaluation.interval=60,
id=1, land.if.bad=FALSE, reanalysis2 = FALSE, query=FALSE)
View(tst2)
wx.extent3 <- NCEP.gather(variable='air.2m', level='gaussian',
months.minmax=c(4,5), years.minmax=c(2006,2007),
lat.southnorth=c(32,35), lon.westeast=c(-35,-32),
reanalysis2 = FALSE, return.units = TRUE)
install.packages('Documents/RNCEP', repos = NULL, type="source")
install.packages('Downloads/RNCEP', repos = NULL, type="source")
wx.extent3 <- NCEP.gather(variable='air.2m', level='gaussian',
months.minmax=c(4,5), years.minmax=c(2006,2007),
lat.southnorth=c(32,35), lon.westeast=c(-35,-32),
reanalysis2 = FALSE, return.units = TRUE)
library('RNCEP')
wx.extent3 <- NCEP.gather(variable='air.2m', level='gaussian',
months.minmax=c(4,5), years.minmax=c(2006,2007),
lat.southnorth=c(32,35), lon.westeast=c(-35,-32),
reanalysis2 = FALSE, return.units = TRUE)
install.packages('Downloads/RNCEP', repos = NULL, type="source")
remove.packages('RNCEP', lib)
remove.packages('RNCEP', )
remove.packages('RNCEP' )
remove.packages(RNCEP)
RNCEP
install.packages('RNCEP')
install.packages("RNCEP")
remove.packages('RNCEP')
library(RNCEP)
install.packages('Downloads/RNCEP', repos = NULL, type="source")
install.packages('Downloads/RNCEP', repos = NULL, type="source")
library(RNCEP)
wx.extent3 <- NCEP.gather(variable='air.2m', level='gaussian',
months.minmax=c(4,5), years.minmax=c(2006,2007),
lat.southnorth=c(32,35), lon.westeast=c(-35,-32),
reanalysis2 = FALSE, return.units = TRUE)
remove.packages('RNCEP')
install.packages('Downloads/RNCEP', repos = NULL, type="source")
wx.extent3 <- NCEP.gather(variable='air.2m', level='gaussian',
months.minmax=c(4,5), years.minmax=c(2006,2007),
lat.southnorth=c(32,35), lon.westeast=c(-35,-32),
reanalysis2 = FALSE, return.units = TRUE)
library(RNCEP)
wx.extent3 <- NCEP.gather(variable='air.2m', level='gaussian',
months.minmax=c(4,5), years.minmax=c(2006,2007),
lat.southnorth=c(32,35), lon.westeast=c(-35,-32),
reanalysis2 = FALSE, return.units = TRUE)
remove.packages('RNCEP')
install.packages('Downloads/RNCEP', repos = NULL, type="source")
library(RNCEP)
wx.extent3 <- NCEP.gather(variable='air.2m', level='gaussian',
months.minmax=c(4,5), years.minmax=c(2006,2007),
lat.southnorth=c(32,35), lon.westeast=c(-35,-32),
reanalysis2 = FALSE, return.units = TRUE)
View(ncep_data)
runApp("eml_app")
library(shiny)
runApp("eml_app")
runApp("../")
runApp("/Users/erichsu/Documents/research/empirical_yield_model/eml_app")
shinyapps::setAccountInfo(name='jiaruixu',
token='38361E06194366B8F7A09D07513D92C8',
secret='<SECRET>')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='jiaruixu',
token='38361E06194366B8F7A09D07513D92C8',
secret='<SECRET>')
shinyapps::setAccountInfo(name='jiaruixu',
token='38361E06194366B8F7A09D07513D92C8',
secret='kUJRxCyRdnd01SRAGd3+5a+YWNxbR1H1L6+8LAsE')
library(shinyapps)
shinyapps::deployApp("/Users/erichsu/Documents/research/empirical_yield_model/eml_app")
faithful
View(hourWinter)
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
View(m)
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shinyapps::deployApp("/Users/erichsu/Documents/research/empirical_yield_model/eml_app")
shinyapps::deployApp("/Users/erichsu/Documents/research/empirical_yield_model/eml_app")
shinyapps::deployApp("/Users/erichsu/Documents/research/empirical_yield_model/eml_app")
library(ggplot2)
library(plyr)#try_default
library(rpart)
library(grid)
library(partykit)
library(RWeka)
library(RColorBrewer)
library(pander)
library(data.table)
library(knitr)
library(devtools)
library(RNCEP)
library(ggplot2)
opts_chunk$set(echo = FALSE, message = FALSE, warnings = FALSE,  cache = FALSE)
download.file("https://raw.githubusercontent.com/sidewallme/2015-Rose-Hulman-Competition/master/clean_yields.csv", method = 'curl', destfile = 'clean_yields.csv')
yields <- fread("clean_yields.csv")
miscanthus <- yields
m <- miscanthus[!(is.na(planting_density) | is.na(yield)),
`:=`(sacchariflorus = grepl('sacchariflorus', species),
sinensis = grepl('sinensis', species),
sinensis.Hybrid = grepl('Hybrid', species),
giganteus = grepl('giganteus', species))]
m$yields.id <- NULL # remove yields.id
library(raster)
x <- getData('worldclim', var='tmin', res=0.5, lon=5, lat=45)
ans <- m[1, list(tmin = getData('worldclim', var = 'tmin', res = 0.5, lon = lon, lat = lat))]
ans
unique_xyt <- unique(yields[,list(lat, lon, year) ])
get_met <- function(year, lat, lon, var){
ans <- NULL
ans <- try_default(quiet = TRUE, default = NA, expr =
NCEP.gather(variable = var, level='gaussian', months.minmax=c(5,9), years.minmax = c(year,year), lat.southnorth = c(lat,lat), lon.westeast=c(lon,lon), reanalysis2 = TRUE, return.units = FALSE, status.bar=FALSE)
)
if(any(!is.na(ans))){
lats <- as.numeric(dimnames(ans)[[1]])
lons <- as.numeric(dimnames(ans)[[2]])
lons[lons>180] <- lons[lons>180] - 360
dlat <- abs(lat - lats)
dlon <- abs(lon - lons)
#weights
wlat <- dlat/sum(dlat, na.rm = TRUE)
wlon <- dlon/sum(dlon, na.rm = TRUE)
weights <- as.matrix(wlat) %*% t(as.matrix(wlon))
ans2 <- rowMeans(ans, dims = 2, na.rm = TRUE)
ans2.1 <- ans2[!is.nan(ans2)]
ans3 <- sum(ans2.1 * weights)
ans <- ans3
}
return(ans)
}
s2year <- udunits2::ud.convert(1, '1/s', '1/year')
## MAT = Mean Annual Temperature
ncep_data_list <- list()
for(i in 1:nrow(unique_xyt)){
ncep_data_list[[i]] <- unique_xyt[i, list(lat, lon, year, MAT = mean(get_met(year, lat, lon, 'air.2m')),
MAP = sum(get_met(year, lat, lon, 'prate.sfc')),
PET = mean(get_met(year, lat, lon, 'pevpr.sfc')),
SOLAR = sum(get_met(year, lat, lon, 'dswrf.sfc'))
)]
ncep_data <- rbindlist(ncep_data_list)
save(ncep_data, file = "~/ncep_data.RData")
}
ggplot() + geom_point(data = ncep_data, aes(lon, lat, color = MAP/PET))
View(m)
d[m$sacchariflorus == "TRUE",]$sacchariflorus = 1
```
d[m$sacchariflorus == "TRUE",]$sacchariflorus = 1
m$yields.id <- NULL # remove yields.id
m[m$sacchariflorus == "TRUE",]$sacchariflorus = 1
m[m$sacchariflorus == "FALSE",]$sacchariflorus = -1
m[m$sinensis == "TRUE",]$sinensis = 1
m[m$sinensis == "FALSE",]$sinensis = -1
m[m$sinensis.Hybrid == "TRUE",]$sinensis.Hybrid = 1
m[m$sinensis.Hybrid == "FALSE",]$sinensis.Hybrid = -1
m[m$giganteus == "TRUE",]$giganteus = 1
m[m$giganteus == "FALSE",]$giganteus = -1
m[m$sacchariflorus == "TRUE",]$sacchariflorus <- 1
m[m$sacchariflorus == "TRUE",]$sacchariflorus <- "1"
m[m$sacchariflorus == TRUE,]$sacchariflorus <- 1
m[m$sacchariflorus == TRUE,]$sacchariflorus = 1
is.factor(m$species)
typeof(m$species)
m$species <- as.factor(m$species)
typeof(m$species)
View(m)
typeof(m$sacchariflorus)
m$sacchariflorus<- as.numeric(m$sacchariflorus)
View(m)
m <- miscanthus[!(is.na(planting_density) | is.na(yield)),
`:=`(sacchariflorus = as.numeric(species == 'sacchariflorus'),
sinensis = as.numeric(species == 'sinensis'),
sinensis.Hybrid = as.numeric(species == 'Hybrid'),
giganteus = as.numeric(species == 'giganteus'))]
m <- miscanthus[!(is.na(planting_density) | is.na(yield)),
`:=`(sacchariflorus = as.numeric(species == "sacchariflorus"),
sinensis = as.numeric(species == "sinensis"),
sinensis.Hybrid = as.numeric(species == "Hybrid""),
giganteus = as.numeric(species == "giganteus"))]
m <- miscanthus[!(is.na(planting_density) | is.na(yield)),
`:=`(sacchariflorus = as.numeric(species == "sacchariflorus"),
sinensis = as.numeric(species == "sinensis"),
sinensis.Hybrid = as.numeric(species == "Hybrid"),
giganteus = as.numeric(species == "giganteus"))]
typeof(m$sacchariflorus)
typeof(m$sacchariflorus)
typeof(m$species)
m <- miscanthus[!(is.na(planting_density) | is.na(yield)),
`:=`(sacchariflorus = as.numeric(m$species == "sacchariflorus"),
sinensis = as.numeric(m$species == "sinensis"),
sinensis.Hybrid = as.numeric(m$species == "Hybrid"),
giganteus = as.numeric(m$species == "giganteus"))]
View(m)
m[m$species == "giganteus",]$giganteus = 1
View(m)
typeof(m)
m_frame <- as.data.frame(m)
m <- miscanthus[!(is.na(planting_density) | is.na(yield)),
`:=`(sacchariflorus = as.numeric(m$species == "sacchariflorus"),
sinensis = as.numeric(m$species == "sinensis"),
sinensis.Hybrid = as.numeric(m$species == "Hybrid"),
giganteus = as.numeric(m$species == "giganteus"))]
m[m$species == "giganteus",]$giganteus = 1
View(m)
m_frame[m_frame$species == "giganteus",]$giganteus = 1
miscanthus <- yields
m <- miscanthus[!(is.na(planting_density) | is.na(yield)),
`:=`(sacchariflorus = as.numeric(m$species == "sacchariflorus"),
sinensis = as.numeric(m$species == "sinensis"),
sinensis.Hybrid = as.numeric(m$species == "Hybrid"),
giganteus = as.numeric(m$species == "giganteus"))]
m <- miscanthus[!(is.na(planting_density) | is.na(yield)),
`:=`(sacchariflorus = grepl('sacchariflorus', species),
sinensis = grepl('sinensis', species),
sinensis.Hybrid = grepl('Hybrid', species),
giganteus = grepl('giganteus', species))]
m$yields.id <- NULL # remove yields.id
m <- as.data.frame(m)
m[m$giganteus == TRUE,]$giganteus = 1
View(m)
m <- miscanthus[!(is.na(planting_density) | is.na(yield)),
`:=`(sacchariflorus = grepl('sacchariflorus', species),
sinensis = grepl('sinensis', species),
sinensis.Hybrid = grepl('Hybrid', species),
giganteus = grepl('giganteus', species))]
m <- miscanthus[!(is.na(planting_density) | is.na(yield)),
`:=`(sacchariflorus = grepl('sacchariflorus', species),
sinensis = grepl('sinensis', species),
sinensis.Hybrid = grepl('Hybrid', species),
giganteus = grepl('giganteus', species))]
m$yields.id <- NULL # remove yields.id
m <- as.data.frame(m)
m$giganteus <- as.numeric(m$giganteus)
m$giganteus <- as.numeric(m$giganteus)
m$sinensis.Hybrid <- as.numeric(m$sinensis.Hybrid)
m$sacchariflorus <- as.numeric(m$sacchariflorus)
m$sinensis <- as.numeric(m$sinensis)
View(m)
m$irrigated <- as.numeric(m$irrigated)
myields <- merge(x = m, y = ncep_data, by = c("lon","lat","year")
)
View(myields)
write.csv(myields, file = "myields.csv", row.names = FALSE)
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
cars
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
yields["yield"]
yields[["yield"]
]
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
plot([[yields$lat]]
plot([[yields$lat]])
plot(yields[["lat"]])
plot(yields[["lat"]], yields$yield)
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
View(myields)
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
colnames(myields)
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
library(rpart)
# load data
data(longley)
# fit model
fit <- rpart(Employed~., data=longley, control=rpart.control(minsplit=5))
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, longley[,1:6])
# summarize accuracy
rmse <- mean((longley$Employed - predictions)^2)
print(rmse)
rmse
library(RWeka)
# load data
data(longley)
# fit model
fit <- M5P(Employed~., data=longley)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, longley[,1:6])
# summarize accuracy
rmse <- mean((longley$Employed - predictions)^2)
print(rmse)
library(ipred)
# load data
data(longley)
# fit model
fit <- bagging(Employed~., data=longley, control=rpart.control(minsplit=5))
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, longley[,1:6])
# summarize accuracy
rmse <- mean((longley$Employed - predictions)^2)
print(rmse)
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
install.packages('partykit')
library(partykit)
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
m5pTree <- M5P(yield ~ sacchariflorus + sinensis + sinensis.Hybrid + giganteus +
lat + lon + fertilizer_n + irrigated + planting_density,
data = yields)
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
plot(m5pTree)
plot(m5pTree)
m5pTree
plot(m5pTree)
library(party)
install.packages('party')
library(party)
plot(m5pTree)
plot( m5pTree )
```
TODO what do you see? what does it mean?
plot( m5pTree )
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
m5pTree <- M5P(yield ~ sacchariflorus + sinensis ,
data = yields)
plot( m5pTree )
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shinyapps::deployApp("/Users/erichsu/Documents/research/empirical_yield_model/eml_app")
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shinyapps::deployApp("/Users/erichsu/Documents/research/empirical_yield_model/eml_app")
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shinyapps::deployApp("/Users/erichsu/Documents/research/empirical_yield_model/eml_app")
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shinyapps::deployApp("/Users/erichsu/Documents/research/empirical_yield_model/eml_app")
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
shiny::runApp('Documents/research/empirical_yield_model/eml_app')
